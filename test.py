import streamlit as st
from fastai.vision.all import *
from pathlib import Path
import pathlib # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PosixPath patch
import sys
from PIL import Image # Import Image ‡∏à‡∏≤‡∏Å Pillow ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡πá‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö (‡πÅ‡∏°‡πâ fastai.vision.all ‡∏à‡∏∞‡∏°‡∏µ PILImage)
import pandas as pd
import plotly.express as px

# --- Monkey patch ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PosixPath ‡∏ö‡∏ô Windows (‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ñ‡πâ‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏• export ‡∏à‡∏≤‡∏Å Colab/Linux) ---
_original_posix_path = None 
# if sys.platform == "win32":
#     if hasattr(pathlib, 'PosixPath') and not isinstance(pathlib.PosixPath, pathlib.WindowsPath):
#         _original_posix_path = pathlib.PosixPath
#         pathlib.PosixPath = pathlib.WindowsPath
#         print("INFO: PosixPath patch applied for Streamlit app.")
# --- ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏™‡πà‡∏ß‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î Patch ---

# --- !!! ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Path ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏°‡πÄ‡∏î‡∏• .pkl ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà !!! ---
MODEL_PATH = Path("convnextv2_thev1_best_for_good.pkl") # <--- ***** ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Path ‡∏ô‡∏µ‡πâ *****
# ‡∏´‡∏£‡∏∑‡∏≠ MODEL_PATH = Path("Thisisthelastone.pkl") # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö app_streamlit.py
# --------------------------------------------------------------------

@st.cache_resource 
def load_my_model(model_path):
    print(f"Attempting to load model from: {model_path}")
    try:
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏Å‡πà‡∏≠‡∏ô‡πÇ‡∏´‡∏•‡∏î
        if not model_path.is_file():
            st.error(f"Model file NOT FOUND at {model_path}. Please check the path in your Streamlit script.")
            return None
        learn = load_learner(model_path)
        print("Model loaded successfully!")
        return learn
    except Exception as e:
        st.error(f"Error loading model: {e}. Ensure the model file is valid and all dependencies are installed (e.g., timm, cloudpickle, fasttransform if needed by your model).")
        return None

# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•
learn = load_my_model(MODEL_PATH)

# --- ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏≤ Streamlit App ---
st.title("üí© Poop Classification")

st.subheader("Upload your Poop Image")
uploaded_file = st.file_uploader(
    "Click This For Upload Image", 
    type=["jpg", "jpeg", "png"], 
    help="Limit 200MB per file"
)

# if learn is None:
#     st.error("AI Model could not be loaded. Please check the server logs or model path configuration.")
#     st.stop() # ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á app ‡∏ñ‡πâ‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ

if uploaded_file is not None:
    image_to_display = Image.open(uploaded_file)
    
    col1, col2 = st.columns([2, 3])

    with col1:
        st.markdown("##### This is your Image")
        st.image(image_to_display, use_column_width=True)

        if st.button("üöΩ Click For Predict", use_container_width=True):
            with st.spinner("Predicting..."):
                img_bytes = uploaded_file.getvalue()
                
                # --- !!! ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÅ‡∏õ‡∏•‡∏á bytes ‡πÄ‡∏õ‡πá‡∏ô PILImage ‡∏Å‡πà‡∏≠‡∏ô predict !!! ---
                try:
                    pil_image = PILImage.create(img_bytes) # ‡πÉ‡∏ä‡πâ PILImage.create ‡∏Ç‡∏≠‡∏á FastAI
                except Exception as e_pil:
                    st.error(f"Error converting uploaded file to an image: {e_pil}")
                    # ‡∏ñ‡πâ‡∏≤‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô PILImage ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå session state ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£ predict (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
                    if 'prediction_made' in st.session_state:
                        del st.session_state.prediction_made 
                    st.stop() # ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡∏ñ‡πâ‡∏≤‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏π‡∏õ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
                # --- ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ---

                try:
                    # ‡∏™‡πà‡∏á PILImage object ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô learn.predict()
                    pred_class, pred_idx, probs = learn.predict(pil_image) 
                    
                    st.markdown("---")
                    st.markdown(f"#### Result is : **{pred_class}**")
                    st.markdown(f"##### {pred_class} : **{probs[pred_idx]:.1%}**") # ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏° 1 ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå
                
                    st.session_state.prediction_made = True
                    st.session_state.predicted_class = pred_class
                    st.session_state.probabilities = probs.numpy() 
                    st.session_state.class_names = list(learn.dls.vocab)
                except Exception as e_predict:
                    st.error(f"Error during prediction: {e_predict}")
                    if 'prediction_made' in st.session_state:
                        del st.session_state.prediction_made
    
    if 'prediction_made' in st.session_state and st.session_state.prediction_made:
        with col2:
            st.markdown("<br>", unsafe_allow_html=True)
            st.markdown("##### Probabilities Chart")
            
            df_probs = pd.DataFrame({
                'Class': st.session_state.class_names,
                'Probability': st.session_state.probabilities * 100
            })
            
            fig = px.pie(df_probs, values='Probability', names='Class', 
                         title='Prediction Probabilities',
                         color_discrete_sequence=px.colors.qualitative.Set3)
            fig.update_traces(textposition='inside', textinfo='percent+label', hoverinfo='label+percent+name')
            fig.update_layout(showlegend=True, legend_title_text='Classes') # ‡πÅ‡∏™‡∏î‡∏á Legend ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ä‡∏∑‡πà‡∏≠
            
            st.plotly_chart(fig, use_container_width=True)
        # ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå session state ‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ predict ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
        # ‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏∞‡∏õ‡∏•‡πà‡∏≠‡∏¢‡πÑ‡∏ß‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏Å‡πá‡πÑ‡∏î‡πâ
        # del st.session_state.prediction_made 

st.markdown("---")
st.caption("App by Chokun7788 (with AI assistant)")
